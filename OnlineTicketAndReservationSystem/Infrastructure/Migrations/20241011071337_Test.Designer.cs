// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(OnlineTicketReservationDbContext))]
    [Migration("20241011071337_Test")]
    partial class Test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("UpdatedDataTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Model.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDataTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4039b0a8-7a2f-4be1-9a53-1c846ab9be58"),
                            CityStatusId = 0,
                            CreatedDateTime = new DateTime(2024, 10, 11, 10, 43, 30, 87, DateTimeKind.Local).AddTicks(6216),
                            CreatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50"),
                            Name = "تهران",
                            ProvinceId = new Guid("84c3d84b-b54f-4e03-8fc6-5130cd643c47"),
                            UpdatedDataTime = new DateTime(2024, 10, 11, 10, 43, 30, 87, DateTimeKind.Local).AddTicks(6234),
                            UpdatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50")
                        },
                        new
                        {
                            Id = new Guid("831a8b53-6870-4e52-ae2e-9f5634aaad54"),
                            CityStatusId = 0,
                            CreatedDateTime = new DateTime(2024, 10, 11, 10, 43, 30, 87, DateTimeKind.Local).AddTicks(6274),
                            CreatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50"),
                            Name = "کرج",
                            ProvinceId = new Guid("84c3d84b-b54f-4e03-8fc6-5130cd643c47"),
                            UpdatedDataTime = new DateTime(2024, 10, 11, 10, 43, 30, 87, DateTimeKind.Local).AddTicks(6276),
                            UpdatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50")
                        },
                        new
                        {
                            Id = new Guid("4a1c90dd-7870-45e1-8998-310c5ee018d9"),
                            CityStatusId = 0,
                            CreatedDateTime = new DateTime(2024, 10, 11, 10, 43, 30, 87, DateTimeKind.Local).AddTicks(6285),
                            CreatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50"),
                            Name = "دماوند",
                            ProvinceId = new Guid("84c3d84b-b54f-4e03-8fc6-5130cd643c47"),
                            UpdatedDataTime = new DateTime(2024, 10, 11, 10, 43, 30, 87, DateTimeKind.Local).AddTicks(6287),
                            UpdatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50")
                        },
                        new
                        {
                            Id = new Guid("238055ba-31fa-4b43-94d4-f5ca3d9234e2"),
                            CityStatusId = 0,
                            CreatedDateTime = new DateTime(2024, 10, 11, 10, 43, 30, 87, DateTimeKind.Local).AddTicks(6294),
                            CreatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50"),
                            Name = "سعادتشهر",
                            ProvinceId = new Guid("84c3d84b-b54f-4e03-8fc6-5130cd643c47"),
                            UpdatedDataTime = new DateTime(2024, 10, 11, 10, 43, 30, 87, DateTimeKind.Local).AddTicks(6295),
                            UpdatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50")
                        },
                        new
                        {
                            Id = new Guid("b28d6216-aebb-4b51-99d9-a0dc7266b322"),
                            CityStatusId = 0,
                            CreatedDateTime = new DateTime(2024, 10, 11, 10, 43, 30, 87, DateTimeKind.Local).AddTicks(6302),
                            CreatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50"),
                            Name = "پرند",
                            ProvinceId = new Guid("84c3d84b-b54f-4e03-8fc6-5130cd643c47"),
                            UpdatedDataTime = new DateTime(2024, 10, 11, 10, 43, 30, 87, DateTimeKind.Local).AddTicks(6303),
                            UpdatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50")
                        });
                });

            modelBuilder.Entity("Model.Entities.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedDataTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = new Guid("84c3d84b-b54f-4e03-8fc6-5130cd643c47"),
                            CreatedDateTime = new DateTime(2024, 10, 11, 10, 43, 30, 87, DateTimeKind.Local).AddTicks(9658),
                            CreatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50"),
                            Name = "تهران",
                            UpdatedDataTime = new DateTime(2024, 10, 11, 10, 43, 30, 87, DateTimeKind.Local).AddTicks(9665),
                            UpdatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50")
                        });
                });

            modelBuilder.Entity("Model.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(500)
                        .HasColumnType("NVarChar");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VarChar");

                    b.Property<string>("RolePersianName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVarChar");

                    b.Property<int>("RoleStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BuyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 10, 11, 10, 43, 30, 90, DateTimeKind.Local).AddTicks(3880));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("UpdatedDataTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c3ba574-16e7-4272-a43a-d4db6df07a1a"),
                            BuyDate = new DateTime(2024, 10, 11, 10, 43, 30, 90, DateTimeKind.Local).AddTicks(4882),
                            CreatedDateTime = new DateTime(2024, 10, 11, 10, 43, 30, 90, DateTimeKind.Local).AddTicks(4888),
                            CreatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50"),
                            SeatNumber = 0,
                            TicketNumber = "41766",
                            UpdatedDataTime = new DateTime(2024, 10, 11, 10, 43, 30, 90, DateTimeKind.Local).AddTicks(4889),
                            UpdatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50"),
                            UserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50")
                        },
                        new
                        {
                            Id = new Guid("fde8ab32-b718-4669-a7ad-1a7e84130bfc"),
                            BuyDate = new DateTime(2024, 10, 11, 10, 43, 30, 90, DateTimeKind.Local).AddTicks(4924),
                            CreatedDateTime = new DateTime(2024, 10, 11, 10, 43, 30, 90, DateTimeKind.Local).AddTicks(4925),
                            CreatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50"),
                            SeatNumber = 0,
                            TicketNumber = "93117",
                            UpdatedDataTime = new DateTime(2024, 10, 11, 10, 43, 30, 90, DateTimeKind.Local).AddTicks(4926),
                            UpdatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50"),
                            UserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50")
                        },
                        new
                        {
                            Id = new Guid("86d8cb35-1dba-431c-90a1-46b60c5e0c0c"),
                            BuyDate = new DateTime(2024, 10, 11, 10, 43, 30, 90, DateTimeKind.Local).AddTicks(4946),
                            CreatedDateTime = new DateTime(2024, 10, 11, 10, 43, 30, 90, DateTimeKind.Local).AddTicks(4948),
                            CreatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50"),
                            SeatNumber = 0,
                            TicketNumber = "76665",
                            UpdatedDataTime = new DateTime(2024, 10, 11, 10, 43, 30, 90, DateTimeKind.Local).AddTicks(4949),
                            UpdatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50"),
                            UserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50")
                        },
                        new
                        {
                            Id = new Guid("d7ffd2f6-62eb-496a-875f-6fad16b0d1a8"),
                            BuyDate = new DateTime(2024, 10, 11, 10, 43, 30, 90, DateTimeKind.Local).AddTicks(4961),
                            CreatedDateTime = new DateTime(2024, 10, 11, 10, 43, 30, 90, DateTimeKind.Local).AddTicks(4962),
                            CreatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50"),
                            SeatNumber = 0,
                            TicketNumber = "62691",
                            UpdatedDataTime = new DateTime(2024, 10, 11, 10, 43, 30, 90, DateTimeKind.Local).AddTicks(4963),
                            UpdatedUserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50"),
                            UserId = new Guid("efe3a5f8-2198-4e31-899e-a3cd19e96d50")
                        });
                });

            modelBuilder.Entity("Model.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VarChar");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVarChar");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVarChar");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVarChar");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDataTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VarChar");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Model.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Model.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Model.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Model.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Model.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Address", b =>
                {
                    b.HasOne("Model.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Model.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");

                    b.Navigation("City");

                    b.Navigation("CreatedUser");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("Model.Entities.City", b =>
                {
                    b.HasOne("Model.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Model.Entities.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Province");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("Model.Entities.Province", b =>
                {
                    b.HasOne("Model.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Model.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("Model.Entities.Ticket", b =>
                {
                    b.HasOne("Model.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Model.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Model.Entities.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("UpdatedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Entities.User", b =>
                {
                    b.HasOne("Model.Entities.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Model.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");

                    b.Navigation("CreateUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Model.Entities.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Model.Entities.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Model.Entities.User", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
